# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KpzdmpgqHL3h6vvW8adsbPby-lAIqd6g
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt

# Install TensorFlow if not already installed
!pip install tensorflow

# Load the CIFAR-10 dataset
(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()

# Preprocess the data
x_train, x_test = x_train / 255.0, x_test / 255.0

# Define a simple CNN model
model = keras.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10)  # 10 classes for CIFAR-10
])

# Compile the model
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))

# Specify the path to your uploaded image
img_path = 'automobile.jpg'  # Update with your image file name

# Load and preprocess the image
img = image.load_img(img_path, target_size=(32, 32))  # Resize the image to match your model's input size
img_array = image.img_to_array(img)
img_array = img_array / 255.0  # Normalize the pixel values
img_array = tf.expand_dims(img_array, 0)  # Add a batch dimension

# Make predictions using your model
predictions = model.predict(img_array)

# Get the class label with the highest probability
predicted_class = tf.argmax(predictions[0]).numpy()

# Load class names for CIFAR-10
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

# Display the uploaded image
plt.imshow(img)
plt.title(f'Predicted Class: {class_names[predicted_class]}')
plt.axis('off')
plt.show()